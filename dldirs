#!/bin/sh
# dldirs

VERSION='1.1.1'

dldirs_main() {
	trap _exit INT TERM

	e_args=16
	e_missing_app=17
	e_no_template=18
	e_no_dest=19
	e_exists=20
	e_no_parent=21

	scriptinv="$( basename "$0" )"
	scriptpath="$( readlink -f "$0" )"
	scriptname="$( basename "$scriptpath" )"

	SUBDIR_PUBLIC="public"
	SUBDIR_TEMPLATE="template"
	SUBDIR_CONTAINER="download"

	dryrun=1

	while getopts hpv opt
	do
		case $opt in
			h) cmd=help ;;
			p) dryrun=0 ;;
			v) cmd=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ -z "$cmd" ] && cmd="$1"
	[ $# -gt 1 ] && shift

	[ -z "$cmd" ] && cmd="help"

	case "$cmd" in
		help|deploy|init|new|parent|version) "dldirs_$cmd" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

dldirs_help() {
cat <<USAGE
$scriptname $VERSION

USAGE: $scriptinv [<options>] <command> [<args>]

Manage download directories.

COMMANDS:

	deploy      Deploy public files to DEPLOY_DEST in .env via rsync.
	init <dir>  Initialize new parent directory.
	new <dir>   Create new public dldirs directory.
	parent      Show parent directory path.
	help        Show this help screen.
	version     Show version number.

OPTIONS:

	-h          Show this help screen.
	-p          Proceed with actual deployment instead of a default dry-run.
	-v          Show version number.

USAGE
}

dldirs_deploy() {
	_load_env

	[ -z "$DEPLOY_DEST" ] && _fatal $e_no_dest "DEPLOY_DEST not set for deploy destination."

	src="$( _find_parent_dir )/$SUBDIR_PUBLIC/"

	args="-n"
	[ $dryrun -eq 0 ] && args=""

	# shellcheck disable=SC2086
	rsync \
		-av \
		$args \
		--delete \
		--delete-excluded \
		--exclude-from=.deploy-exclude \
		--progress \
		"$src" \
		"$DEPLOY_DEST" \
	;
}

dldirs_init() {
	newdir="$1"
	[ -d "$newdir" ] && _fatal $e_exists "Already exists: $newdir"
	git clone https://github.com/remino/dldirs "$newdir"
}

dldirs_new() {
	newdir="$1"
	[ -z "$newdir" ] && _fatal $e_args "Missing new directory name. See -h for details."

	template_path="$( _find_parent_dir )/$SUBDIR_TEMPLATE"
	newdir_path="$( _find_parent_dir )/$SUBDIR_PUBLIC/$SUBDIR_CONTAINER/$newdir"

	[ -d "$newdir_path" ] && _fatal $e_exists "Already exists: $newdir_path"
	[ ! -d "$template_path" ] && _fatal $e_no_template "No template directory: $template_path"

	git clone "$template_path" "$newdir_path" > /dev/null 2>&1

	grep -FRl "#DLDIR_NAME#" "$newdir_path" | while read -r file
	do
		sed -i '' "s/#DLDIR_NAME#/$newdir/g" "$file"
	done

	_echo "$newdir_path"
}

dldirs_parent() {
	_find_parent_dir
}

dldirs_version() {
	_echo "$scriptname $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_find_parent_dir() {
	[ -n "$parentdir" ] && echo "$parentdir" && return

	parentdir="$( pwd )"

	while [ "$parentdir" != "/" ]
	do
		[ -f "$parentdir/.dldirs" ] && _echo "$parentdir" && return
		parentdir="$( dirname "$parentdir" )"
	done

	_fatal $e_no_parent "No parent directory found."
}

_invalid_cmd() {
	_error "Invalid command: $cmd"
	_echo
	dldirs_help
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	dldirs_help
	exit $e_args
}

_load_env() {
	ENV_FILE="$( _find_parent_dir )/.env"
	# shellcheck source=/dev/null
	[ -f "$ENV_FILE" ] && . "$ENV_FILE"
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]
	then
		_fatal "$e_missing_app" "One or more executables or apps are missing."
	fi
}

dldirs_main "$@"
